(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{168:function(t,e,n){"use strict";n.r(e);var o=n(20),a=Object(o.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"ui-customization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ui-customization","aria-hidden":"true"}},[t._v("#")]),t._v(" UI Customization")]),t._v(" "),n("p",[t._v("UI customization feature allows to modify or completely replace any of the built-in UI elements, like title menu, settings menu, printer backlog, etc.")]),t._v(" "),n("p",[t._v("Be aware though, that text printers and choice handlers are implemented via actors interface and are customized in a different way; see the corresponding documentation ("),n("router-link",{attrs:{to:"/guide/text-printers.html"}},[t._v("text printers")]),t._v(", "),n("router-link",{attrs:{to:"/guide/choices.html"}},[t._v("choice handlers")]),t._v(") for more info.")],1),t._v(" "),n("p",[t._v("If you wish to modify an existing built-in UI prefab, you can find them at "),n("code",[t._v("Naninovel/Prefabs/DefaultUI")]),t._v(' folder. Duplicate the prefab (Ctrl/Cmd+D) and move it out of the "Naninovel" folder.')]),t._v(" "),n("p",[t._v("When creating a new prefab from scratch, don't forget to attach a component that implements interface of the UI you're going to override. This component should be attached to the root object of the prefab.")]),t._v(" "),n("p",[t._v("All the UI interfaces are stored under "),n("code",[t._v("Naninovel.UI")]),t._v(" namespace:")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Interface")]),t._v(" "),n("th",[t._v("Corresponding UI")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("IBacklogUI")]),t._v(" "),n("td",[t._v("Printer backlog.")])]),t._v(" "),n("tr",[n("td",[t._v("ILoadingUI")]),t._v(" "),n("td",[t._v("Panel shown when the game is loading.")])]),t._v(" "),n("tr",[n("td",[t._v("IMovieUI")]),t._v(" "),n("td",[t._v("UI used to host movies.")])]),t._v(" "),n("tr",[n("td",[t._v("ISaveLoadUI")]),t._v(" "),n("td",[t._v("Panel used for saving and loading game.")])]),t._v(" "),n("tr",[n("td",[t._v("ISettingsUI")]),t._v(" "),n("td",[t._v("Panel used for changing game settings.")])]),t._v(" "),n("tr",[n("td",[t._v("ITitleUI")]),t._v(" "),n("td",[t._v("Title (main) menu of the game.")])]),t._v(" "),n("tr",[n("td",[t._v("IExternalScriptsUI")]),t._v(" "),n("td",[t._v("External scripts browser UI (community modding feature).")])])])]),t._v(" "),n("p",[t._v("When the prefab is ready, just drop it to the "),n("code",[t._v("Custom UI")]),t._v(" list in the UI configuration manager accessible with "),n("code",[t._v("Naninovel -> Configuration -> UI")]),t._v(" context menu.")]),t._v(" "),n("p",[n("img",{attrs:{src:"/guide/custom-ui.png",alt:"UI Customization"}})]),t._v(" "),n("p",[t._v("When the engine is initializing it'll spawn all the prefabs added to the "),n("code",[t._v("Custom UI")]),t._v(" list. In case spawned prefab has a component attached to the root object that implements one of the built-in UI interfaces, built-in prefab with default implementation won't be spawned.")])])},[],!1,null,null,null);a.options.__file="ui-customization.md";e.default=a.exports}}]);