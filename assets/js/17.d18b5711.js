(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{187:function(e,t,n){"use strict";n.r(t);var o=n(20),a=Object(o.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"custom-novel-actions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#custom-novel-actions","aria-hidden":"true"}},[e._v("#")]),e._v(" Custom Novel Actions")]),e._v(" "),n("p",[e._v("Novel action represents a single operation, that controls what happens on the scene; e.g., it can be used to change a background, move a character or load another novel script. Parametrized action sequences defined in "),n("router-link",{attrs:{to:"/guide/novel-scripts.html"}},[e._v("novel scripts")]),e._v(" effectively controls the game flow. You can find available built-in actions in the "),n("router-link",{attrs:{to:"/api/"}},[e._v("API reference")]),e._v(". In code, all the built-in novel action implementations are defined under "),n("code",[e._v("Naninovel.Actions")]),e._v(" namespace.")],1),e._v(" "),n("p",[e._v("To add your own custom novel action, create a new C# class, inherit "),n("code",[e._v("Naninovel.Actions.NovelAction")]),e._v(" class and implement "),n("code",[e._v("ExecuteAsync")]),e._v(" and "),n("code",[e._v("UndoAsync")]),e._v(" abstract methods.")]),e._v(" "),n("p",[n("code",[e._v("ExecuteAsync")]),e._v(" is an async method invoked when the action is executed by the scripts player; put the action logic here. Use "),n("router-link",{attrs:{to:"/guide/engine-services.html"}},[e._v("engine services")]),e._v(" to access the engine built-in systems. Novel script execution will halt until this method returns a completed task in case "),n("code",[e._v("Wait")]),e._v(" parameter is "),n("code",[e._v("true")]),e._v(".")],1),e._v(" "),n("p",[n("code",[e._v("UndoAsync")]),e._v(" method is invoked when rewinding novel scripts backwards. In case your novel action changes scene state, you should revert the changes here; otherwise just return a completed task.")]),e._v(" "),n("p",[e._v("To expose an action parameter to novel scripts, add a "),n("code",[e._v("NovelActionParameter")]),e._v(" attribute to the public field you want to expose. The attribute takes two optional arguments: "),n("code",[e._v("name")]),e._v(" (string) is an alias name of the parameter and "),n("code",[e._v("isOptional")]),e._v(" (bool) controls whether the parameter should be considered optional (can be omitted in novel scripts). If you wish to make the parameter nameless, set an empty string ("),n("code",[e._v('""')]),e._v(" or "),n("code",[e._v("string.Empty")]),e._v(") as the alias.")]),e._v(" "),n("p",[e._v("To assign a tag (alias) to the novel action, apply "),n("code",[e._v("NovelActionTag")]),e._v(" attribute to the implementing class. In novel scripts you can reference the action by either its implementation class name or the assigned tag.")]),e._v(" "),n("p",[e._v("In case execution of the action requires loading some resources, implement "),n("code",[e._v("NovelAction.IPreloadable")]),e._v(" interface to preload the required resources when the game is loading.")]),e._v(" "),n("p",[e._v("In case the action have parameters that can be localized (text directly presented to the user, usually), implement "),n("code",[e._v("NovelAction.ILocalizable")]),e._v(" interface to add the action to the generated script localization documents.")]),e._v(" "),n("p",[e._v("You can find scripts with all the built-in action implementations at "),n("code",[e._v("Naninovel/Runtime/Actions")]),e._v(" package folder; feel free to use them as a reference when implementing your own custom actions.")])])},[],!1,null,null,null);a.options.__file="custom-novel-actions.md";t.default=a.exports}}]);